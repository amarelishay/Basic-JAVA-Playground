#BlueJ class context
comment0.target=test1ex1
comment0.text=\r\n\ Write\ a\ description\ of\ class\ test1ex1\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=a\ num\ i\ sum\ lencounter
comment1.target=boolean\ isSum(int[],\ int,\ int,\ int,\ int)
comment10.params=n\ max
comment10.target=int\ howManySorted(int,\ int)
comment11.params=str1\ str2\ counter
comment11.target=int\ edit(java.lang.String,\ java.lang.String,\ int)
comment12.params=arr\ i\ j
comment12.target=boolean\ isValid(char[][],\ int,\ int)
comment13.params=arr\ word\ col\ row\ counter\ origword
comment13.target=void\ findword(char[][],\ java.lang.String,\ int,\ int,\ int,\ java.lang.String)
comment14.params=mat
comment14.target=int\ cntTrueReg(boolean[][])
comment15.params=mat\ i\ j
comment15.target=int\ cntTrueReg(boolean[][],\ int,\ int)
comment16.params=mat\ i\ j
comment16.target=void\ toFalse(boolean[][],\ int,\ int)
comment17.params=matrix
comment17.target=java.lang.String\ get2DArrayPrint(boolean[][])
comment18.params=matrix
comment18.target=java.lang.String\ get2DArrayPrint(int[][])
comment19.params=arr\ num
comment19.target=int\ countTriplets(int[],\ int)
comment2.params=a\ num
comment2.target=boolean\ isSum(int[],\ int)
comment20.params=m
comment20.target=void\ printPathWeights(int[][])
comment21.params=m\ soFar\ row\ col\ counter
comment21.target=void\ printPathWeights(int[][],\ int[][],\ int,\ int,\ int)
comment22.params=s\ n
comment22.target=boolean\ isSumOf(int[],\ int)
comment23.params=arr\ sum\ n\ i\ see
comment23.target=boolean\ isSumOf(int[],\ int,\ int,\ int,\ int[])
comment24.params=arr\ num
comment24.target=int\ binarySerchFirst(int[],\ int)
comment25.params=arr\ num
comment25.target=int\ binarySerchLast(int[],\ int)
comment26.params=a\ x
comment26.target=int\ count(int[],\ int)
comment27.params=s1\ s2
comment27.target=boolean\ isSubstring(java.lang.String,\ java.lang.String)
comment28.params=s1\ s2\ origin\ i
comment28.target=boolean\ isSubstring(java.lang.String,\ java.lang.String,\ java.lang.String,\ int)
comment29.params=mat\ k
comment29.target=int\ totalways(int[][],\ int)
comment3.params=road1\ road2
comment3.target=int\ shortestRoad(int[],\ int[])
comment30.params=mat\ k\ row\ col\ top
comment30.target=int\ totalways(int[][],\ int,\ int,\ int,\ boolean)
comment31.params=arr
comment31.target=void\ crossSort(int[])
comment32.params=arr
comment32.target=boolean\ isPythagorean(int[])
comment33.params=arr\ word
comment33.target=void\ findWord(char[][],\ java.lang.String)
comment34.params=arr\ word\ row\ col\ mat
comment34.target=void\ findWord(char[][],\ java.lang.String,\ int,\ int,\ int[][])
comment35.params=row\ col\ mat\ word\ arr\ counter
comment35.target=boolean\ checkWord(int,\ int,\ int[][],\ java.lang.String,\ char[][],\ int)
comment36.params=a\ pattern
comment36.target=boolean\ match(int[],\ int[])
comment37.params=a\ pattern\ i\ j
comment37.target=boolean\ match(int[],\ int[],\ int,\ int)
comment38.params=args
comment38.target=void\ main(java.lang.String[])
comment4.params=mat\ k
comment4.target=int\ turnCheck(int[][],\ int)
comment5.params=mat\ k\ row\ col\ top
comment5.target=int\ turnCheck(int[][],\ int,\ int,\ int,\ boolean)
comment6.params=arr
comment6.target=int\ longestPalindrome(int[])
comment7.params=arr\ i\ bigger
comment7.target=int\ longestPalindrome(int[],\ int,\ int)
comment8.params=arr\ i\ k\ counter
comment8.target=int\ checklength(int[],\ int,\ int,\ int)
comment9.params=arr
comment9.target=int\ missingValue(int[])
numComments=39
